// <auto-generated />
using System;
using KartverketProsjekt.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KartverketProsjekt.Migrations
{
    [DbContext(typeof(KartverketDbContext))]
    partial class KartverketDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("KartverketProsjekt.Models.DomainModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea76989c-3cc9-43eb-b253-f0e042643053",
                            Email = "sysadmin@test.com",
                            EmailConfirmed = false,
                            FirstName = "System",
                            LastName = "Administrator",
                            LockoutEnabled = false,
                            NormalizedEmail = "SYSADMIN@TEST.COM",
                            NormalizedUserName = "SYSADMIN@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ4qWPVZOyce6xDaAAEAs4rOJZayW8JokQfCujlY3MS9IhYofFQ5WEhUFqpJ0nLMxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "39b5c17c-c90d-4566-8ff9-d58bbd483e7f",
                            TwoFactorEnabled = false,
                            UserName = "sysadmin@test.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec8307a0-f855-4436-8853-e5c1763cebe8",
                            Email = "casehandler@test.com",
                            EmailConfirmed = false,
                            FirstName = "Test",
                            LastName = "CaseHandler",
                            LockoutEnabled = false,
                            NormalizedEmail = "CASEHANDLER@TEST.COM",
                            NormalizedUserName = "CASEHANDLER@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGWjDlUhWYp/+ZX3sAohTslM1uS6Z4oPCH8emo7bkrzbxnQy4lyjC6IsQ05kMp7BHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37910a97-a33c-4ec3-bbda-63142a44a20c",
                            TwoFactorEnabled = false,
                            UserName = "casehandler@test.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50617e6e-f858-4d65-a9e7-db0547ba7ae1",
                            Email = "submitter@test.com",
                            EmailConfirmed = false,
                            FirstName = "Test",
                            LastName = "Submitter",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUBMITTER@TEST.COM",
                            NormalizedUserName = "SUBMITTER@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGmHyArl6eVG0ZYFZJkadOjk1nO7pFiaQmPQT8BWpuSbuobV84FKK6CtXs3mwHvbGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a802a46d-694e-431c-ab95-be430b3bd579",
                            TwoFactorEnabled = false,
                            UserName = "submitter@test.com"
                        });
                });

            modelBuilder.Entity("KartverketProsjekt.Models.DomainModels.AttachmentModel", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AttachmentId"));

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.Property<int>("MapReportId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentId");

                    b.HasIndex("MapReportId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("KartverketProsjekt.Models.DomainModels.DialogueModel", b =>
                {
                    b.Property<int>("DialogueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DialogueId"));

                    b.Property<int>("MapReportId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("DialogueId");

                    b.HasIndex("MapReportId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Dialogue");
                });

            modelBuilder.Entity("KartverketProsjekt.Models.DomainModels.MapLayerModel", b =>
                {
                    b.Property<int>("MapLayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MapLayerId"));

                    b.Property<string>("MapLayerType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("MapLayerId");

                    b.ToTable("MapLayer");

                    b.HasData(
                        new
                        {
                            MapLayerId = 1,
                            MapLayerType = "Fargekart"
                        },
                        new
                        {
                            MapLayerId = 2,
                            MapLayerType = "Gråtonekart"
                        },
                        new
                        {
                            MapLayerId = 3,
                            MapLayerType = "Turkart"
                        },
                        new
                        {
                            MapLayerId = 4,
                            MapLayerType = "Sjøkart"
                        });
                });

            modelBuilder.Entity("KartverketProsjekt.Models.DomainModels.MapReportModel", b =>
                {
                    b.Property<int>("MapReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MapReportId"));

                    b.Property<string>("CaseHandlerId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GeoJsonString")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MapLayerId")
                        .HasColumnType("int");

                    b.Property<int>("MapReportStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SubmitterId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("MapReportId");

                    b.HasIndex("CaseHandlerId");

                    b.HasIndex("MapLayerId");

                    b.HasIndex("MapReportStatusId");

                    b.HasIndex("SubmitterId");

                    b.ToTable("MapReport");
                });

            modelBuilder.Entity("KartverketProsjekt.Models.DomainModels.MapReportStatusModel", b =>
                {
                    b.Property<int>("MapReportStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MapReportStatusId"));

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("MapReportStatusId");

                    b.ToTable("MapReportStatus");

                    b.HasData(
                        new
                        {
                            MapReportStatusId = 1,
                            StatusDescription = "Pending"
                        },
                        new
                        {
                            MapReportStatusId = 2,
                            StatusDescription = "In Progress"
                        },
                        new
                        {
                            MapReportStatusId = 3,
                            StatusDescription = "Completed"
                        },
                        new
                        {
                            MapReportStatusId = 4,
                            StatusDescription = "Rejected"
                        });
                });

            modelBuilder.Entity("KartverketProsjekt.Models.DomainModels.UserModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "default@example.com",
                            FirstName = "Default",
                            LastName = "User",
                            PhoneNumber = "0000000000",
                            UserRoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            Email = "submitter@example.com",
                            FirstName = "Test",
                            LastName = "Submitter",
                            PhoneNumber = "1100000000",
                            UserRoleId = 3
                        },
                        new
                        {
                            UserId = 3,
                            Email = "casehandler@example.com",
                            FirstName = "Test",
                            LastName = "CaseHandler",
                            PhoneNumber = "1200000000",
                            UserRoleId = 2
                        });
                });

            modelBuilder.Entity("KartverketProsjekt.Models.DomainModels.UserRoleModel", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<bool>("IsPrioritised")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserRoleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserRoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserRoleId = 1,
                            IsPrioritised = false,
                            UserRoleName = "Systemadministrator"
                        },
                        new
                        {
                            UserRoleId = 2,
                            IsPrioritised = false,
                            UserRoleName = "Saksbehandler"
                        },
                        new
                        {
                            UserRoleId = 3,
                            IsPrioritised = false,
                            UserRoleName = "Innmelder"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "1",
                            Name = "System Administrator",
                            NormalizedName = "SYSADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "2",
                            Name = "Case Handler",
                            NormalizedName = "CASEHANDLER"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "3",
                            Name = "Submitter",
                            NormalizedName = "SUBMITTER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "1",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "1",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KartverketProsjekt.Models.DomainModels.AttachmentModel", b =>
                {
                    b.HasOne("KartverketProsjekt.Models.DomainModels.MapReportModel", "MapReport")
                        .WithMany("Attachments")
                        .HasForeignKey("MapReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MapReport");
                });

            modelBuilder.Entity("KartverketProsjekt.Models.DomainModels.DialogueModel", b =>
                {
                    b.HasOne("KartverketProsjekt.Models.DomainModels.MapReportModel", "MapReport")
                        .WithMany()
                        .HasForeignKey("MapReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KartverketProsjekt.Models.DomainModels.ApplicationUser", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KartverketProsjekt.Models.DomainModels.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MapReport");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("KartverketProsjekt.Models.DomainModels.MapReportModel", b =>
                {
                    b.HasOne("KartverketProsjekt.Models.DomainModels.ApplicationUser", "CaseHandler")
                        .WithMany()
                        .HasForeignKey("CaseHandlerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KartverketProsjekt.Models.DomainModels.MapLayerModel", "MapLayer")
                        .WithMany()
                        .HasForeignKey("MapLayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KartverketProsjekt.Models.DomainModels.MapReportStatusModel", "MapReportStatus")
                        .WithMany()
                        .HasForeignKey("MapReportStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KartverketProsjekt.Models.DomainModels.ApplicationUser", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CaseHandler");

                    b.Navigation("MapLayer");

                    b.Navigation("MapReportStatus");

                    b.Navigation("Submitter");
                });

            modelBuilder.Entity("KartverketProsjekt.Models.DomainModels.UserModel", b =>
                {
                    b.HasOne("KartverketProsjekt.Models.DomainModels.UserRoleModel", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KartverketProsjekt.Models.DomainModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KartverketProsjekt.Models.DomainModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KartverketProsjekt.Models.DomainModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KartverketProsjekt.Models.DomainModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KartverketProsjekt.Models.DomainModels.MapReportModel", b =>
                {
                    b.Navigation("Attachments");
                });
#pragma warning restore 612, 618
        }
    }
}
