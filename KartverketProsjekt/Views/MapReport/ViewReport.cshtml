@using KartverketProsjekt.Models.DomainModels 
@model MapReportModel

<div class="container py-5">
    <div class="row">
        <div class="col-md-4">
            @if (Model != null)
            {
                <form method="get">

                    <div class="mb-3">
                        <label class="form-label">Id</label>
                        <input type="text" id="id" class="form-control" asp-for="MapReportId" readonly />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Dato</label>
                        <input type="text" id="date" class="form-control" asp-for="SubmissionDate" readonly />
                    </div>

                    <div class="mb-3">
                        <div class="mb-3">
                            <label class="form-label">Beskrivelse</label>
                            <textarea id="description" class="form-control" asp-for="Description" readonly style="resize: vertical;"></textarea>
                        </div>
                        
                    </div>

                    @* <div class="mb-3">
                        <label class="form-label">Status</label>
                        <input type="text" id="status" class="form-control" asp-for="CaseStatus" readonly />
                    </div> *@ 

                </form>
            }
            else
            {
                <p>Ingen innmelding funnet!</p>
            }
        </div>
        <div class="col-md-8">
            <div id="map"></div>
        </div>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

    <script>
        var map = L.map('map').setView([60.145, 10.25], 15);

        L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topo/default/webmercator/{z}/{y}/{x}.png', { 
            maxZoom: 15, 
            attribution: '&copy; <a href="http://www.kartverket.no/">Kartverket</a>' 
        }).addTo(map);

        // Handle the GeoJSON data if it exists
        @if (Model != null && !string.IsNullOrEmpty(Model.GeoJsonString))
        {   
            // Wrapping in <text> tag to avoid Razor syntax errors 
            <text>

            try {
                // Initializing a variable with the GeoJson property value. 
                // Html.Raw() is used to avoid encoding the JSON string
                var geoJsonData = @Html.Raw(Model.GeoJsonString);

                // Creates new featuregroup instance to store layers from GeoJSON data
                var drawnItems = new L.FeatureGroup();

                // Adds the GeoJSON data to the map
                L.geoJSON(geoJsonData, {
                    onEachFeature: function(feature, layer) {
                        // Bind the popup to the layer
                        layer.bindPopup('@Html.Raw(Json.Serialize(Model.Description))');
                        drawnItems.addLayer(layer);
                    }
                });

                map.addLayer(drawnItems);

                // Fit the map to the GeoJSON bounds
                var bounds = drawnItems.getBounds();
                if (bounds.isValid()) {
                    map.fitBounds(bounds);
                }
            } catch (error) {
                console.error("Error processing GeoJSON:", error);
            }
            </text>
        }
    </script>
}