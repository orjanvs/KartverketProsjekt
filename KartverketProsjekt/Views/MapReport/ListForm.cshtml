@using KartverketProsjekt.Models.DomainModels

@model List<MapReportModel>

<head>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
</head>
<div class="container">
    <div class="row align-items-start">
        <div class="col">
            <div id="markerInfo"></div>
        </div>
        <div class="col">
            <div id="map"></div>
        </div>
    </div>
</div>
@section Scripts {
    <link rel="stylesheet"
        href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css" />
    <link rel="stylesheet"
          href="https://unpkg.com/browse/leaflet.markercluster@1.4.1/dist/css/MarkerCluster.css"  />
    <link rel="stylesheet"
          href="https://unpkg.com/browse/leaflet.markercluster@1.4.1/dist//css/MarkerCluster.Default.css" />
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>
    <script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/test_markers.js"></script>


    <script>
        // Wait for the page to load before initializing the map
        document.addEventListener("DOMContentLoaded", function () {
        // Add map layers
        var baseMaps = {
            "Fargekart": L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topo/default/webmercator/{z}/{y}/{x}.png', { attribution: '&copy; <a href="http://www.kartverket.no/">Kartverket</a>' }),
            "Gråtonekart": L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topograatone/default/webmercator/{z}/{y}/{x}.png', { attribution: '&copy; <a href="http://www.kartverket.no/">Kartverket</a>' }),
            "Turkart": L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/toporaster/default/webmercator/{z}/{y}/{x}.png', { attribution: '&copy; <a href="http://www.kartverket.no/">Kartverket</a>' }),
            "Sjøkart": L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/sjokartraster/default/webmercator/{z}/{y}/{x}.png', { attribution: '&copy; <a href="http://www.kartverket.no/">Kartverket</a>' })
        };

        // Initialising map with geolocation variables as position and default map layer
        var map = L.map('map', {
            center: [60.14,10.25],
            zoom: 9,
            layers: [baseMaps["Fargekart"]] // Set default layer
        });

        // Add button to toggle map layers
        L.control.layers(baseMaps).addTo(map);

        // Progress bar for long load times
        var progress = document.getElementById('progress');
        var progressBar = document.getElementById('progress-bar');

        function updateProgressBar(processed, total, elapsed, layersArray) {
            if (elapsed > 1000) {
                // if it takes more than a second to load, display the progress bar:
                progress.style.display = 'block';
                progressBar.style.width = Math.round(processed/total*100) + '%';
            }

            if (processed === total) {
                // all markers processed - hide the progress bar:
                progress.style.display = 'none';
            }
        }

        // Event listener for when the base layer is changed
        map.on('baselayerchange', function (e) {
            var mapLayerId = determineMapLayerIdFromName(e.name);
            document.getElementById('mapLayerIdInput').value = mapLayerId;
            console.log(mapLayerId);
            console.log(e);
            console.log('MapLayerIdInput')
        });

        function determineMapLayerIdFromName(name) {
            // Implement logic to determine MapLayerId based on the layer name
            switch (name) {
                case "Fargekart":
                    return 1;
                case "Gråtonekart":
                    return 2;
                case "Turkart":
                    return 3;
                case "Sjøkart":
                    return 4;
                default:
                    return 0;

            }
            }

        var markers = L.markerClusterGroup({
            spiderfyOnMaxZoom: true,
            showCoverageOnHover: false,
            zoomToBoundsOnClick: false,
            chunkedLoading: true,
            chunkProgress: updateProgressBar 
        });
        var markerList = [];

        for (var i = 0; i < centrePoints.length; i++) {
            var a = centrePoints[i];
            var title = a[2];
            var marker = L.marker(L.latLng(a[0], a[1]), { title: title });
            marker.bindPopup(title);
            markerList.push(marker);
        }

        markers.addLayers(markerList);
        map.addLayer(markers);


        });
    </script>
}
